import{_ as a,c as p,a9 as n,j as i,G as l,w as t,a as e,B as d,o as h}from"./chunks/framework.CojUQF9E.js";const z=JSON.parse('{"title":"依赖预构建","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/guide/dep-pre-bundling"}],["meta",{"property":"og:title","content":"依赖预构建"}]]},"headers":[],"relativePath":"guide/dep-pre-bundling.md","filePath":"guide/dep-pre-bundling.md"}'),k={name:"guide/dep-pre-bundling.md"},r={class:"vp-code-block-title"},E={class:"language-js vp-adaptive-theme"},c={class:"shiki shiki-themes github-light github-dark vp-code twoslash lsp",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"},tabindex:"0"},g={class:"line"},u={style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},y={class:"line"},m={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},f={class:"line"},v={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},b={class:"line"},F={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},w={class:"line"},C={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},D={class:"line"},A={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}};function T(B,s,S,V,x,_){const o=d("v-menu");return h(),p("div",null,[s[39]||(s[39]=n(`<h1 id="dependency-pre-bundling" tabindex="-1">依赖预构建 <a class="header-anchor" href="#dependency-pre-bundling" aria-label="Permalink to &quot;依赖预构建 {#dependency-pre-bundling}&quot;">​</a></h1><p>当你首次启动 <code>vite</code> 时，Vite 在本地加载你的站点之前预构建了项目依赖。默认情况下，它是自动且透明地完成的。</p><h2 id="the-why" tabindex="-1">原因 <a class="header-anchor" href="#the-why" aria-label="Permalink to &quot;原因 {#the-why}&quot;">​</a></h2><p>这就是 Vite 执行时所做的“依赖预构建”。这个过程有两个目的:</p><ol><li><p><strong>CommonJS 和 UMD 兼容性：</strong> 在开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将以 CommonJS 或 UMD 形式提供的依赖项转换为 ES 模块。</p><p>在转换 CommonJS 依赖项时，Vite 会进行智能导入分析，这样即使模块的导出是动态分配的（例如 React），具名导入（named imports）也能正常工作：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 符合预期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React, { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span></code></pre></div></li><li><p><strong>性能：</strong> 为了提高后续页面的加载性能，Vite 将那些具有许多内部模块的 ESM 依赖项转换为单个模块。</p><p>有些包将它们的 ES 模块构建为许多单独的文件，彼此导入。例如，<a href="https://unpkg.com/browse/lodash-es/" target="_blank" rel="noreferrer"><code>lodash-es</code> 有超过 600 个内置模块</a>！当我们执行 <code>import { debounce } from &#39;lodash-es&#39;</code> 时，浏览器同时发出 600 多个 HTTP 请求！即使服务器能够轻松处理它们，但大量请求会导致浏览器端的网络拥塞，使页面加载变得明显缓慢。</p><p>通过将 <code>lodash-es</code> 预构建成单个模块，现在我们只需要一个HTTP请求！</p></li></ol><div class="tip custom-block"><p class="custom-block-title">注意</p><p>依赖预构建仅适用于开发模式，并使用 <code>esbuild</code> 将依赖项转换为 ES 模块。在生产构建中，将使用 <code>@rollup/plugin-commonjs</code>。</p></div><h2 id="automatic-dependency-discovery" tabindex="-1">自动依赖搜寻 <a class="header-anchor" href="#automatic-dependency-discovery" aria-label="Permalink to &quot;自动依赖搜寻 {#automatic-dependency-discovery}&quot;">​</a></h2><p>如果没有找到现有的缓存，Vite 会扫描您的源代码，并自动寻找引入的依赖项（即 &quot;bare import&quot;，表示期望从 <code>node_modules</code> 中解析），并将这些依赖项作为预构建的入口点。预打包使用 <code>esbuild</code> 执行，因此通常速度非常快。</p><p>在服务器已经启动后，如果遇到尚未在缓存中的新依赖项导入，则 Vite 将重新运行依赖项构建过程，并在需要时重新加载页面。</p><h2 id="monorepos-and-linked-dependencies" tabindex="-1">Monorepo 和链接依赖 <a class="header-anchor" href="#monorepos-and-linked-dependencies" aria-label="Permalink to &quot;Monorepo 和链接依赖 {#monorepos-and-linked-dependencies}&quot;">​</a></h2><p>在一个 monorepo 启动中，该仓库中的某个包可能会成为另一个包的依赖。Vite 会自动侦测没有从 <code>node_modules</code> 解析的依赖项，并将链接的依赖视为源码。它不会尝试打包被链接的依赖，而是会分析被链接依赖的依赖列表。</p><p>然而，这需要被链接的依赖被导出为 ESM 格式。如果不是，那么你可以在配置里将此依赖添加到 <a href="/config/dep-optimization-options.html#optimizedeps-include"><code>optimizeDeps.include</code></a> 和 <a href="/config/build-options.html#build-commonjsoptions"><code>build.commonjsOptions.include</code></a> 这两项中。</p>`,12)),i("div",r,[s[38]||(s[38]=i("div",{class:"vp-code-block-title-bar"},[i("span",{class:"vp-code-block-title-text","data-title":"vite.config.js"},"vite.config.js")],-1)),i("div",E,[s[36]||(s[36]=i("button",{title:"Copy Code",class:"copy"},null,-1)),s[37]||(s[37]=i("span",{class:"lang"},"js",-1)),i("pre",c,[i("code",null,[i("span",g,[s[2]||(s[2]=i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export",-1)),s[3]||(s[3]=i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," default",-1)),s[4]||(s[4]=i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," ",-1)),i("span",u,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[0]||(s[0]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"function"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," defineConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"config"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," UserConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," UserConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"5"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," overloads"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,`Type helper to make it easier to use vite.config.ts
accepts a direct`),e(`
`),i("p",null,"UserConfig"),e(`
`),i("p",null,`object, or a function that returns it.
The function receives a`),e(`
`),i("p",null,"ConfigEnv"),e(`
`),i("p",null,"object.")])],-1)])),default:t(()=>[s[1]||(s[1]=i("span",null,"defineConfig",-1))]),_:1})]),s[5]||(s[5]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({",-1))]),s[28]||(s[28]=e(`
`)),i("span",y,[s[8]||(s[8]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ",-1)),i("span",m,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[6]||(s[6]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"UserConfig.optimizeDeps"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DepOptimizationOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,"Dep optimization options")])],-1)])),default:t(()=>[s[7]||(s[7]=i("span",null,"optimizeDeps",-1))]),_:1})]),s[9]||(s[9]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[29]||(s[29]=e(`
`)),i("span",f,[s[12]||(s[12]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ",-1)),i("span",v,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[10]||(s[10]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"DepOptimizationConfig.include"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," string[] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,`Force optimize listed dependencies (must be resolvable import paths,
cannot be globs).`)])],-1)])),default:t(()=>[s[11]||(s[11]=i("span",null,"include",-1))]),_:1})]),s[13]||(s[13]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": [",-1)),s[14]||(s[14]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'linked-dep'",-1)),s[15]||(s[15]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"],",-1))]),s[30]||(s[30]=e(`
`)),s[31]||(s[31]=i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  },")],-1)),s[32]||(s[32]=e(`
`)),i("span",b,[s[18]||(s[18]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ",-1)),i("span",F,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[16]||(s[16]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"build"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," BuildEnvironmentOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,"Build specific options")])],-1)])),default:t(()=>[s[17]||(s[17]=i("span",null,"build",-1))]),_:1})]),s[19]||(s[19]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[33]||(s[33]=e(`
`)),i("span",w,[s[22]||(s[22]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ",-1)),i("span",C,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[20]||(s[20]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"BuildEnvironmentOptions.commonjsOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," RollupCommonJSOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,[e("Options to pass on to "),i("code",null,"@rollup/plugin-commonjs")])])],-1)])),default:t(()=>[s[21]||(s[21]=i("span",null,"commonjsOptions",-1))]),_:1})]),s[23]||(s[23]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[34]||(s[34]=e(`
`)),i("span",D,[s[26]||(s[26]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      ",-1)),i("span",A,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[24]||(s[24]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"RollupCommonJSOptions.include"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," string "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," RegExp "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," readonly"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (string "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," RegExp)[] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,[e(`A minimatch pattern, or array of patterns, which specifies the files in
the build the plugin should operate on. By default, all files with
extension `),i("code",null,'".cjs"'),e(" or those in "),i("code",null,"extensions"),e(` are included, but you can
narrow this list by only including specific files. These files will be
analyzed and transpiled if either the analysis does not find ES module
specific statements or `),i("code",null,"transformMixedEsModules"),e(" is "),i("code",null,"true"),e(".")])]),i("div",{class:"twoslash-popup-docs twoslash-popup-docs-tags vp-doc"},[i("span",{class:"twoslash-popup-docs-tag"},[i("span",{class:"twoslash-popup-docs-tag-name"},"@default"),i("span",{class:"twoslash-popup-docs-tag-value"},"undefined")])])],-1)])),default:t(()=>[s[25]||(s[25]=i("span",null,"include",-1))]),_:1})]),s[27]||(s[27]=n('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">linked-dep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span>',9))]),s[35]||(s[35]=n(`
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>`,6))])])])]),s[40]||(s[40]=n('<p>当对链接的依赖进行更改时，请使用 <code>--force</code> 命令行选项重新启动开发服务器，以使更改生效。</p><h2 id="customizing-the-behavior" tabindex="-1">自定义行为 <a class="header-anchor" href="#customizing-the-behavior" aria-label="Permalink to &quot;自定义行为 {#customizing-the-behavior}&quot;">​</a></h2><p>有时候默认的依赖启发式算法（discovery heuristics）可能并不总是理想的。如果您想要明确地包含或排除依赖项，可以使用 <a href="/config/dep-optimization-options.html"><code>optimizeDeps</code> 配置项</a> 来进行设置。</p><p><code>optimizeDeps.include</code> 或 <code>optimizeDeps.exclude</code> 的一个典型使用场景，是当 Vite 在源码中无法直接发现 import 的时候。例如，import 可能是插件转换的结果。这意味着 Vite 无法在初始扫描时发现 import —— 只能在文件被浏览器请求并转换后才能发现。这将导致服务器在启动后立即重新打包。</p><p><code>include</code> 和 <code>exclude</code> 都可以用来处理这个问题。如果依赖项很大（包含很多内部模块）或者是 CommonJS，那么你应该包含它；如果依赖项很小，并且已经是有效的 ESM，则可以排除它，让浏览器直接加载它。</p><p>你可以通过 <a href="/config/dep-optimization-options.html#optimizedeps-esbuildoptions"><code>optimizeDeps.esbuildOptions</code> 选项</a> 进一步自定义 esbuild。例如，添加一个 esbuild 插件来处理依赖项中的特殊文件，或者更改 <a href="https://esbuild.github.io/api/#target" target="_blank" rel="noreferrer">build <code>target</code></a>。</p><h2 id="caching" tabindex="-1">缓存 <a class="header-anchor" href="#caching" aria-label="Permalink to &quot;缓存 {#caching}&quot;">​</a></h2><h3 id="file-system-cache" tabindex="-1">文件系统缓存 <a class="header-anchor" href="#file-system-cache" aria-label="Permalink to &quot;文件系统缓存 {#file-system-cache}&quot;">​</a></h3><p>Vite 将预构建的依赖项缓存到 <code>node_modules/.vite</code> 中。它会基于以下几个来源来决定是否需要重新运行预构建步骤：</p><ul><li>包管理器的锁文件内容，例如 <code>package-lock.json</code>，<code>yarn.lock</code>，<code>pnpm-lock.yaml</code>，或者 <code>bun.lockb</code>；</li><li>补丁文件夹的修改时间；</li><li><code>vite.config.js</code> 中的相关字段；</li><li><code>NODE_ENV</code> 的值。</li></ul><p>只有在上述其中一项发生更改时，才需要重新运行预构建。</p><p>如果出于某些原因你想要强制 Vite 重新构建依赖项，你可以在启动开发服务器时指定 <code>--force</code> 选项，或手动删除 <code>node_modules/.vite</code> 缓存目录。</p><h3 id="browser-cache" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#browser-cache" aria-label="Permalink to &quot;浏览器缓存 {#browser-cache}&quot;">​</a></h3><p>已预构建的依赖请求使用 HTTP 头 <code>max-age=31536000, immutable</code> 进行强缓存，以提高开发期间页面重新加载的性能。一旦被缓存，这些请求将永远不会再次访问开发服务器。如果安装了不同版本的依赖项（这反映在包管理器的 lockfile 中），则会通过附加版本查询自动失效。如果你想通过本地编辑来调试依赖项，您可以：</p><ol><li>通过浏览器开发工具的 Network 选项卡暂时禁用缓存；</li><li>重启 Vite 开发服务器指定 <code>--force</code> 选项，来重新构建依赖项;</li><li>重新载入页面。</li></ol>',15))])}const j=a(k,[["render",T]]);export{z as __pageData,j as default};
