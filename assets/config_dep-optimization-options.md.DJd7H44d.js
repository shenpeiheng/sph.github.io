import{_ as p,c as d,a9 as n,j as i,a as e,G as l,w as t,B as a,o as r}from"./chunks/framework.CojUQF9E.js";const O=JSON.parse('{"title":"依赖优化选项","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/config/dep-optimization-options"}],["meta",{"property":"og:title","content":"依赖优化选项"}]]},"headers":[],"relativePath":"config/dep-optimization-options.md","filePath":"config/dep-optimization-options.md"}'),h={name:"config/dep-optimization-options.md"},k={class:"warning custom-block"},g={class:"language-js vp-adaptive-theme"},u={class:"shiki shiki-themes github-light github-dark vp-code twoslash lsp",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"},tabindex:"0"},E={class:"line"},m={style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},c={class:"line"},y={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},f={class:"line"},b={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},v={class:"language-js vp-adaptive-theme"},F={class:"shiki shiki-themes github-light github-dark vp-code twoslash lsp",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"},tabindex:"0"},z={class:"line"},C={style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},D={class:"line"},w={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},A={class:"line"},x={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}};function B(T,s,S,V,q,P){const o=a("v-menu");return r(),d("div",null,[s[50]||(s[50]=n('<h1 id="dep-optimization-options" tabindex="-1">依赖优化选项 <a class="header-anchor" href="#dep-optimization-options" aria-label="Permalink to &quot;依赖优化选项 {#dep-optimization-options}&quot;">​</a></h1><ul><li><strong>相关内容：</strong> <a href="/guide/dep-pre-bundling.html">依赖预构建</a></li></ul><p>除非另有说明，本节中的选项仅适用于依赖优化器，该优化器仅在开发环境中使用。</p><h2 id="optimizedeps-entries" tabindex="-1">optimizeDeps.entries <a class="header-anchor" href="#optimizedeps-entries" aria-label="Permalink to &quot;optimizeDeps.entries&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string | string[]</code></li></ul><p>默认情况下，Vite 会抓取你的 <code>index.html</code> 来检测需要预构建的依赖项（忽略了<code>node_modules</code>、<code>build.outDir</code>、<code>__tests__</code> 和 <code>coverage</code>）。如果指定了 <code>build.rollupOptions.input</code>，Vite 将转而去抓取这些入口点。</p><p>如果这两者都不合你意，则可以使用此选项指定自定义条目——该值需要遵循 <a href="https://github.com/SuperchupuDev/tinyglobby" target="_blank" rel="noreferrer">tinyglobby 模式</a> ，或者是相对于 Vite 项目根目录的匹配模式数组。当显式声明了 <code>optimizeDeps.entries</code> 时默认只有 <code>node_modules</code> 和 <code>build.outDir</code> 文件夹会被忽略。如果还需忽略其他文件夹，你可以在模式列表中使用以 <code>!</code> 为前缀的、用来匹配忽略项的模式。如果你不想忽略 <code>node_modules</code> 和 <code>build.outDir</code>，你可以选择直接使用字符串路径（不使用 tinyglobby 模式）。</p><h2 id="optimizedeps-exclude" tabindex="-1">optimizeDeps.exclude <a class="header-anchor" href="#optimizedeps-exclude" aria-label="Permalink to &quot;optimizeDeps.exclude {#optimizedeps-exclude}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li></ul><p>在预构建中强制排除的依赖项。</p>',10)),i("div",k,[s[24]||(s[24]=i("p",{class:"custom-block-title"},"CommonJS",-1)),s[25]||(s[25]=i("p",null,[e("CommonJS 的依赖不应该排除在优化外。如果一个 ESM 依赖被排除在优化外，但是却有一个嵌套的 CommonJS 依赖，则应该为该 CommonJS 依赖添加 "),i("code",null,"optimizeDeps.include"),e("。例如：")],-1)),i("div",g,[s[22]||(s[22]=i("button",{title:"Copy Code",class:"copy"},null,-1)),s[23]||(s[23]=i("span",{class:"lang"},"js",-1)),i("pre",u,[i("code",null,[i("span",E,[s[2]||(s[2]=i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export",-1)),s[3]||(s[3]=i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," default",-1)),s[4]||(s[4]=i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," ",-1)),i("span",m,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[0]||(s[0]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"function"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," defineConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"config"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," UserConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," UserConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"5"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," overloads"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,`Type helper to make it easier to use vite.config.ts
accepts a direct`),e(`
`),i("p",null,"UserConfig"),e(`
`),i("p",null,`object, or a function that returns it.
The function receives a`),e(`
`),i("p",null,"ConfigEnv"),e(`
`),i("p",null,"object.")])],-1)])),default:t(()=>[s[1]||(s[1]=i("span",null,"defineConfig",-1))]),_:1})]),s[5]||(s[5]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({",-1))]),s[16]||(s[16]=e(`
`)),i("span",c,[s[8]||(s[8]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ",-1)),i("span",y,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[6]||(s[6]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"UserConfig.optimizeDeps"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DepOptimizationOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,"Dep optimization options")])],-1)])),default:t(()=>[s[7]||(s[7]=i("span",null,"optimizeDeps",-1))]),_:1})]),s[9]||(s[9]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[17]||(s[17]=e(`
`)),i("span",f,[s[12]||(s[12]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ",-1)),i("span",b,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[10]||(s[10]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"DepOptimizationConfig.include"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," string[] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,`Force optimize listed dependencies (must be resolvable import paths,
cannot be globs).`)])],-1)])),default:t(()=>[s[11]||(s[11]=i("span",null,"include",-1))]),_:1})]),s[13]||(s[13]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": [",-1)),s[14]||(s[14]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'esm-dep > cjs-dep'",-1)),s[15]||(s[15]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"],",-1))]),s[18]||(s[18]=e(`
`)),s[19]||(s[19]=i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  },")],-1)),s[20]||(s[20]=e(`
`)),s[21]||(s[21]=i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1))])])])]),s[51]||(s[51]=n('<h2 id="optimizedeps-include" tabindex="-1">optimizeDeps.include <a class="header-anchor" href="#optimizedeps-include" aria-label="Permalink to &quot;optimizeDeps.include {#optimizedeps-include}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li></ul><p>默认情况下，不在 <code>node_modules</code> 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包。</p><p><strong>实验性：</strong> 如果你使用的是一个有很多深层导入的库，你也可以指定一个尾部的 glob 模式来一次性地预构建所有深层导入。这将避免在使用新的深层导入时不断地预构建。可以在此 <a href="https://github.com/vitejs/vite/discussions/15833" target="_blank" rel="noreferrer">提供反馈</a>。例如：</p>',4)),i("div",v,[s[48]||(s[48]=i("button",{title:"Copy Code",class:"copy"},null,-1)),s[49]||(s[49]=i("span",{class:"lang"},"js",-1)),i("pre",F,[i("code",null,[i("span",z,[s[28]||(s[28]=i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export",-1)),s[29]||(s[29]=i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," default",-1)),s[30]||(s[30]=i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," ",-1)),i("span",C,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[26]||(s[26]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"function"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," defineConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"config"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," UserConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," UserConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"5"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," overloads"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,`Type helper to make it easier to use vite.config.ts
accepts a direct`),e(`
`),i("p",null,"UserConfig"),e(`
`),i("p",null,`object, or a function that returns it.
The function receives a`),e(`
`),i("p",null,"ConfigEnv"),e(`
`),i("p",null,"object.")])],-1)])),default:t(()=>[s[27]||(s[27]=i("span",null,"defineConfig",-1))]),_:1})]),s[31]||(s[31]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({",-1))]),s[42]||(s[42]=e(`
`)),i("span",D,[s[34]||(s[34]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ",-1)),i("span",w,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[32]||(s[32]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"UserConfig.optimizeDeps"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DepOptimizationOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,"Dep optimization options")])],-1)])),default:t(()=>[s[33]||(s[33]=i("span",null,"optimizeDeps",-1))]),_:1})]),s[35]||(s[35]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[43]||(s[43]=e(`
`)),i("span",A,[s[38]||(s[38]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ",-1)),i("span",x,[l(o,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:t(({})=>s[36]||(s[36]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"DepOptimizationConfig.include"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," string[] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")]),i("div",{class:"twoslash-popup-docs vp-doc"},[i("p",null,`Force optimize listed dependencies (must be resolvable import paths,
cannot be globs).`)])],-1)])),default:t(()=>[s[37]||(s[37]=i("span",null,"include",-1))]),_:1})]),s[39]||(s[39]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": [",-1)),s[40]||(s[40]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'my-lib/components/**/*.vue'",-1)),s[41]||(s[41]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"],",-1))]),s[44]||(s[44]=e(`
`)),s[45]||(s[45]=i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  },")],-1)),s[46]||(s[46]=e(`
`)),s[47]||(s[47]=i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1))])])]),s[52]||(s[52]=n('<h2 id="optimizedeps-esbuild-options" tabindex="-1">optimizeDeps.esbuildOptions <a class="header-anchor" href="#optimizedeps-esbuild-options" aria-label="Permalink to &quot;optimizeDeps.esbuildOptions {#optimizedeps-esbuild-options}&quot;">​</a></h2><ul><li><strong>类型：</strong> <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a><code>&lt;</code><a href="https://esbuild.github.io/api/#general-options" target="_blank" rel="noreferrer"><code>EsbuildBuildOptions</code></a><code>, | &#39;bundle&#39; | &#39;entryPoints&#39; | &#39;external&#39; | &#39;write&#39; | &#39;watch&#39; | &#39;outdir&#39; | &#39;outfile&#39; | &#39;outbase&#39; | &#39;outExtension&#39; | &#39;metafile&#39;&gt;</code></li></ul><p>在依赖扫描和优化过程中传递给 esbuild 的选项。</p><p>某些选项进行了省略，因为修改它们与 Vite 的优化方案并不兼容。</p><ul><li>忽略了 <code>external</code> 选项，请使用 Vite 的 <code>optimizeDeps.exclude</code> 选项</li><li><code>plugins</code> 与 Vite 的 dep 插件合并</li></ul><h2 id="optimizedeps-force" tabindex="-1">optimizeDeps.force <a class="header-anchor" href="#optimizedeps-force" aria-label="Permalink to &quot;optimizeDeps.force {#optimizedeps-force}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li></ul><p>设置为 <code>true</code> 可以强制依赖预构建，而忽略之前已经缓存过的、已经优化过的依赖。</p><h2 id="optimizedeps-holduntilcrawlend" tabindex="-1">optimizeDeps.holdUntilCrawlEnd <a class="header-anchor" href="#optimizedeps-holduntilcrawlend" aria-label="Permalink to &quot;optimizeDeps.holdUntilCrawlEnd&quot;">​</a></h2><ul><li><strong>实验性：</strong> <a href="https://github.com/vitejs/vite/discussions/15834" target="_blank" rel="noreferrer">提供反馈</a></li><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <code>true</code></li></ul><p>当该功能被启用时，系统会在冷启动时保持第一个优化的依赖结果，直到所有的静态导入都被检索完毕。这样可以避免因为发现新的依赖项而触发新的公共 chunk 生成，从而需要刷新整个页面。如果通过扫描和在 <code>include</code> 中明确定义的方式能找到所有的依赖项，那么最好关闭这个功能，这样浏览器可以并行处理更多的请求。</p><h2 id="optimizedeps-disabled" tabindex="-1">optimizeDeps.disabled <a class="header-anchor" href="#optimizedeps-disabled" aria-label="Permalink to &quot;optimizeDeps.disabled {#optimizedeps-disabled}&quot;">​</a></h2><ul><li><strong>已废弃</strong></li><li><strong>实验性：</strong> <a href="https://github.com/vitejs/vite/discussions/13839" target="_blank" rel="noreferrer">提供反馈</a></li><li><strong>类型：</strong> <code>boolean | &#39;build&#39; | &#39;dev&#39;</code></li><li><strong>默认：</strong> <code>&#39;build&#39;</code></li></ul><p>此选项已被弃用。从 Vite 5.1 版本开始，构建过程中对依赖项的预打包已经被移除。将 <code>optimizeDeps.disabled</code> 设置为 <code>true</code> 或 <code>&#39;dev&#39;</code> 将会禁用优化器，配置为 <code>false</code> 或 <code>&#39;build&#39;</code> 将会在开发模式下启用优化器。</p><p>如果你想完全禁用优化器，可以设置 <code>optimizeDeps.noDiscovery: true</code> 来禁止自动发现依赖项，并保持 <code>optimizeDeps.include</code> 未定义或为空。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在构建过程中优化依赖项是一个 <strong>实验性</strong> 的功能。尝试这种策略的项目也会使用 <code>build.commonjsOptions: { include: [] }</code> 来移除 <code>@rollup/plugin-commonjs</code>。如果你这样做，将会有一个警告提示你在打包时需要重新启用它，以支持仅使用 CJS 的包。</p></div><h2 id="optimizedeps-needsinterop" tabindex="-1">optimizeDeps.needsInterop <a class="header-anchor" href="#optimizedeps-needsinterop" aria-label="Permalink to &quot;optimizeDeps.needsInterop&quot;">​</a></h2><ul><li><strong>实验性</strong></li><li><strong>类型:</strong> <code>string[]</code></li></ul><p>当导入这些依赖项时，会强制 ESM 转换。Vite 能够正确检测到依赖项是否需要转换处理（interop），因此通常不需要使用此选项。然而，不同的依赖项组合可能导致其中一些包以不同方式预构建。将这些包添加到 <code>needsInterop</code> 中可以通过避免重新加载整个页面来加快冷启动速度。如果某个依赖项符合此情况，Vite 将抛出警告，建议你在配置中添加该包名。</p>',19))])}const I=p(h,[["render",B]]);export{O as __pageData,I as default};
