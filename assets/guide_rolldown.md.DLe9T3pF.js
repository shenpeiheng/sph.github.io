import{_ as e,c as n,j as s,a,G as t,a9 as o,B as p,o as h}from"./chunks/framework.CojUQF9E.js";const b=JSON.parse('{"title":"Rolldown 集成","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/guide/rolldown"}],["meta",{"property":"og:title","content":"Rolldown 集成"}]]},"headers":[],"relativePath":"guide/rolldown.md","filePath":"guide/rolldown.md"}'),r={name:"guide/rolldown.md"};function d(k,i,c,g,E,u){const l=p("YouTubeVideo");return h(),n("div",null,[i[0]||(i[0]=s("h1",{id:"rolldown-integration",tabindex:"-1"},[a("Rolldown 集成 "),s("a",{class:"header-anchor",href:"#rolldown-integration","aria-label":'Permalink to "Rolldown 集成 {#rolldown-integration}"'},"​")],-1)),i[1]||(i[1]=s("p",null,[a("Vite 计划将由 Rust 驱动的 JavaScript 打包工具 "),s("a",{href:"https://rolldown.rs",target:"_blank",rel:"noreferrer"},"Rolldown"),a(" 集成进来，以提升构建的性能和功能。")],-1)),t(l,{videoId:"RRjfm8cMveQ"}),i[2]||(i[2]=o(`<h2 id="what-is-rolldown" tabindex="-1">Rolldown 是什么？ <a class="header-anchor" href="#what-is-rolldown" aria-label="Permalink to &quot;Rolldown 是什么？ {#what-is-rolldown}&quot;">​</a></h2><p>Rolldown 是一个现代化、高性能的 JavaScript 打包工具，由 Rust 编写。它被设计为 Rollup 的替代品，旨在保持与现有生态系统兼容的同时，显著提升性能。</p><p>Rolldown 专注于三个主要原则：</p><ul><li><strong>速度</strong>：利用 Rust 的高性能进行构建</li><li><strong>兼容性</strong>：能够与现有的 Rollup 插件一起工作</li><li><strong>优化</strong>：拥有比 esbuild 和 Rollup 更先进的特性</li></ul><h2 id="why-vite-is-migrating-to-rolldown" tabindex="-1">为什么 Vite 要迁移到 Rolldown <a class="header-anchor" href="#why-vite-is-migrating-to-rolldown" aria-label="Permalink to &quot;为什么 Vite 要迁移到 Rolldown {#why-vite-is-migrating-to-rolldown}&quot;">​</a></h2><ol><li><p><strong>统一</strong>：Vite 目前使用 esbuild 进行依赖预打包，使用 Rollup 进行生产构建。Rolldown 的目标是将这两个过程统一到一个高性能的打包工具中，以降低复杂性。</p></li><li><p><strong>性能</strong>：Rolldown 的 Rust 实现在性能上比基于 JavaScript 的打包工具有显著的提升。虽然具体的基准测试可能会因项目大小和复杂性而有所不同，但早期测试表明，与 Rollup 相比，Rolldown 的速度有望得到提高。</p></li><li><p><strong>额外特性</strong>：Rolldown 提供了 Rollup 或 esbuild 中没有的功能，例如高级的分块控制，内置的模块热替换（HMR），以及模块联邦（Module Federation）。</p></li></ol><p>欲深入了解 Rolldown 的设计动机，请参阅<a href="https://rolldown.rs/guide/#why-rolldown" target="_blank" rel="noreferrer">构建 Rolldown 的原因</a>。</p><h2 id="benefits-of-trying-rolldown-vite" tabindex="-1">尝试 <code>rolldown-vite</code> 的好处 <a class="header-anchor" href="#benefits-of-trying-rolldown-vite" aria-label="Permalink to &quot;尝试 \`rolldown-vite\` 的好处 {#benefits-of-trying-rolldown-vite}&quot;">​</a></h2><ul><li>对于大型项目，可以显著提升构建速度</li><li>提供有价值的反馈，参与塑造 Vite 的未来打包体验</li><li>为最终的官方 Rolldown 集成做好准备</li></ul><h2 id="how-to-try-rolldown" tabindex="-1">如何尝试 Rolldown <a class="header-anchor" href="#how-to-try-rolldown" aria-label="Permalink to &quot;如何尝试 Rolldown {#how-to-try-rolldown}&quot;">​</a></h2><p>基于 Rolldown 驱动的 Vite 目前以名为 <code>rolldown-vite</code> 的独立包提供。如果你的项目中直接依赖了 <code>vite</code>，可以在项目的 <code>package.json</code>文件里将 <code>vite</code> 包设置别名指向 <code>rolldown-vite</code>，这样就能实现无缝替换。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^6.0.0&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vite&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你使用了 Vitepress 或其他以 Vite 作为同等依赖（peer dependency）的元框架，你需要在 <code>package.json</code> 文件中覆盖 <code>vite</code> 依赖，具体操作方式会因你使用的包管理器而略有不同。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-pa-ck" id="tab-yGcZ5sS" checked><label data-title="npm" for="tab-yGcZ5sS">npm</label><input type="radio" name="group-pa-ck" id="tab-nmRg8xc"><label data-title="Yarn" for="tab-nmRg8xc">Yarn</label><input type="radio" name="group-pa-ck" id="tab-yZ75nnO"><label data-title="pnpm" for="tab-yZ75nnO">pnpm</label><input type="radio" name="group-pa-ck" id="tab-b8x0Dgy"><label data-title="Bun" for="tab-b8x0Dgy">Bun</label></div><div class="blocks"><div class="language-json vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resolutions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>在添加 overrides 之后，重新安装你的依赖并像往常一样启动你的开发服务器或构建你的项目即可，无需进一步的配置更改。</p><h2 id="known-limitations" tabindex="-1">已知限制 <a class="header-anchor" href="#known-limitations" aria-label="Permalink to &quot;已知限制 {#known-limitations}&quot;">​</a></h2><p>虽然 Rolldown 的目标是成为 Rollup 的替代品，但还有一些特性正在实现中，以及一些小的有意的行为差异。需要查看完整的列表，请参考 <a href="https://github.com/vitejs/rolldown-vite/pull/84#issue-2903144667" target="_blank" rel="noreferrer">这个 GitHub PR</a>，它会定期更新。</p><h3 id="option-validation-errors" tabindex="-1">验证选项错误 <a class="header-anchor" href="#option-validation-errors" aria-label="Permalink to &quot;验证选项错误 {#option-validation-errors}&quot;">​</a></h3><p>当传入未知或无效选项时，Rolldown 会抛出错误。由于 Rolldown 不支持 Rollup 中的部分选项，根据您或所使用的元框架设置的选项，可能会遇到相关错误。下方展示了此类错误消息的示例：</p><blockquote><p>Error: Failed validate input options.</p><ul><li>For the &quot;preserveEntrySignatures&quot;. Invalid key: Expected never but received &quot;preserveEntrySignatures&quot;.</li></ul></blockquote><p>如果你自己没有传递这个选项，这个问题必须由使用的框架来解决。你可以通过设置 <code>ROLLDOWN_OPTIONS_VALIDATION=loose</code> 环境变量来暂时忽略这个错误。</p><h2 id="performance" tabindex="-1">性能 <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;性能 {#performance}&quot;">​</a></h2><p><code>rolldown-vite</code> 主要致力于确保与现有生态系统的兼容性，因此其默认配置旨在实现平滑过渡。如果你切换到更快的基于 Rust 的内部插件或进行其他自定义配置，还可以获得进一步的性能提升。</p><h2 id="enabling-native-plugins" tabindex="-1">启用原生插件 <a class="header-anchor" href="#enabling-native-plugins" aria-label="Permalink to &quot;启用原生插件 {#enabling-native-plugins}&quot;">​</a></h2><p>感谢 Rolldown 和 Oxc，各种内部的 Vite 插件，如别名或解析插件，已被转换为 Rust。在撰写本文时，这些插件默认并未启用，因为它们的行为可能与 JavaScript 版本不同。</p><p>要测试它们，你可以在你的 Vite 配置中将 <code>experimental.enableNativePlugin</code> 选项设置为 <code>true</code>。</p><h3 id="withfilter-wrapper" tabindex="-1"><code>withFilter</code> 包装器 <a class="header-anchor" href="#withfilter-wrapper" aria-label="Permalink to &quot;\`withFilter\` 包装器 {#withfilter-wrapper}&quot;">​</a></h3><p>插件作者可以选择使用 <a href="#hook-filter-feature">钩子过滤功能</a>，以减少 Rust 和 JavaScript 运行时之间的通信开销。 但如果你使用的某些插件还未采用该功能，而你又希望受益于它，可以使用 <code>withFilter</code> 包装器自行为插件添加过滤条件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在你的 vite.config.ts 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { withFilter, defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> svgr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-svgr&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 仅对以 \`.svg?react\` 结尾的文件加载 \`svgr\` 插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      svgr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /*...*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { load: { id:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">react</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="reporting-issues" tabindex="-1">反馈问题 <a class="header-anchor" href="#reporting-issues" aria-label="Permalink to &quot;反馈问题 {#reporting-issues}&quot;">​</a></h2><p>由于这是一个实验性的集成，你可能会遇到一些问题。如果你遇到问题，请在 <a href="https://github.com/vitejs/rolldown-vite" target="_blank" rel="noreferrer"><code>vitejs/rolldown-vite</code></a> 仓库中反馈，<strong>而不是主 Vite 仓库</strong>。</p><p>在 <a href="https://github.com/vitejs/rolldown-vite/issues/new" target="_blank" rel="noreferrer">上报问题</a> 时，请根据相应的问题模板进行操作，并提供模板中所需的信息，这通常包括：</p><ul><li>问题的最小复现</li><li>你的环境详细信息（操作系统，Node 版本，包管理器）</li><li>任何相关的错误信息或日志</li></ul><p>如果你想进行实时讨论和故障排除，请确保加入 <a href="https://chat.rolldown.rs/" target="_blank" rel="noreferrer">Rolldown Discord</a>。</p><h2 id="versioning-policy" tabindex="-1">版本管理策略 <a class="header-anchor" href="#versioning-policy" aria-label="Permalink to &quot;版本管理策略 {#versioning-policy}&quot;">​</a></h2><p><code>rolldown-vite</code> 的版本管理策略与普通 Vite 包保持主版本号和次版本号的一致。这种同步确保了在某个特定的 Vite 次版本发布中包含的功能，也会出现在对应的 <code>rolldown-vite</code> 次版本发布中。但需要注意的是，补丁版本在两个项目之间并不同步。如果你想确认普通 Vite 包的某个具体变更是否已经包含在 <code>rolldown-vite</code> 中，可以随时查阅 <a href="https://github.com/vitejs/rolldown-vite/blob/rolldown-vite/packages/vite/CHANGELOG.md" target="_blank" rel="noreferrer"><code>rolldown-vite</code> 独立的更新日志</a> 以确认。</p><p>此外，请注意，<code>rolldown-vite</code> 本身仍处于实验阶段。由于其实验性质，即使在补丁版本中也可能引入破坏性变更。另外，<code>rolldown-vite</code> 仅对其最新的次版本进行更新。即使是重要的安全问题或 bug 修复，也不会为较早的主版本或次版本发布补丁。</p><h2 id="future-plans" tabindex="-1">未来计划 <a class="header-anchor" href="#future-plans" aria-label="Permalink to &quot;未来计划 {#future-plans}&quot;">​</a></h2><p><code>rolldown-vite</code> 包是一个临时的解决方案，用于收集反馈和稳定 Rolldown 的集成。在未来，这个功能将被合并回主 Vite 仓库。</p><p>我们鼓励你尝试 <code>rolldown-vite</code> 并通过反馈和问题报告来参与其开发工作。</p><p>未来我们将为 Vite 引入全量打包模式（Full Bundle Mode），该模式将在生产环境 <em>和开发模式</em> 下提供打包后的文件。</p><h3 id="why-introducing-full-bundle-mode" tabindex="-1">为何引入全量打包模式？ <a class="header-anchor" href="#why-introducing-full-bundle-mode" aria-label="Permalink to &quot;为何引入全量打包模式？ {#why-introducing-full-bundle-mode}&quot;">​</a></h3><p>Vite 以其非打包开发服务器方案著称，这正是其早期凭借速度优势迅速流行的关键原因。这种方案最初是尝试探索在不进行传统打包的情况下，开发服务器性能能达到何种极限。</p><p>但随着项目规模和复杂度的增长，两大挑战逐渐显现：</p><ol><li><p><strong>开发/生产环境不一致性</strong>：开发环境提供的非打包 JavaScript 与生产环境打包构建产物存在运行时行为差异，可能导致仅在生产环境暴露的问题，增加调试难度。</p></li><li><p><strong>开发阶段性能衰减</strong>：非打包方案导致每个模块需单独请求，产生大量网络请求。虽然 <em>对生产环境无影响</em>，但会造成开发服务器启动和页面刷新时的显著开销。在大型应用中（需处理数百甚至数千独立请求）该问题尤为突出，若开发者使用网络代理，刷新延迟和开发体验下降将更加严重。</p></li></ol><p>通过 Rolldown 的整合，我们有机会在保持 Vite 标志性性能的同时统一开发与生产体验。全量打包模式将实现：</p><ul><li>大型应用仍保持快速启动</li><li>开发与生产环境行为一致性</li><li>降低页面刷新的网络开销</li><li>在 ESM 输出基础上维持高效 HMR</li></ul><p>该模式初期将作为可选特性提供（类似 Rolldown 整合方案），我们计划在收集反馈并确保稳定性后将其设为默认模式。</p><h2 id="plugin-framework-authors-guide" tabindex="-1">插件/框架作者指南 <a class="header-anchor" href="#plugin-framework-authors-guide" aria-label="Permalink to &quot;插件/框架作者指南 {#plugin-framework-authors-guide}&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这部分内容主要是针对插件和框架的开发者。如果你是一般用户，你可以忽略这部分内容。</p></div><h3 id="overview-of-major-changes" tabindex="-1">主要变更概述 <a class="header-anchor" href="#overview-of-major-changes" aria-label="Permalink to &quot;主要变更概述 {#overview-of-major-changes}&quot;">​</a></h3><ul><li>Rolldown 用于构建（之前使用 Rollup）</li><li>Rolldown 用于 optimizer（之前使用 esbuild）</li><li>Rolldown 处理 CommonJS 支持（之前使用 @rollup/plugin-commonjs）</li><li>Oxc 用于语法降级（之前使用 esbuild）</li><li>Lightning CSS 默认用于 CSS 压缩（之前使用 esbuild）</li><li>Oxc minifier 默认用于 JS 压缩（之前使用 esbuild）</li><li>Rolldown 用于打包配置（之前使用 esbuild）</li></ul><h3 id="detecting-rolldown-vite" tabindex="-1">检测 <code>rolldown-vite</code> <a class="header-anchor" href="#detecting-rolldown-vite" aria-label="Permalink to &quot;检测 \`rolldown-vite\` {#detecting-rolldown-vite}&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在大多数情况下，你不需要检测你的插件是运行在 <code>rolldown-vite</code> 还是 <code>vite</code> 上，你应该在两者之间寻求一致的行为，而不是采用条件分支。</p></div><p>如果你需要 <code>rolldown-vite</code> 有不同的行为，你有两种方法可以检测是否使用了 <code>rolldown-vite</code>：</p><p>检查 <code>this.meta.rolldownVersion</code> 的存在：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolveId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.meta.rolldownVersion) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // rolldown-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // rollup-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><br><p>检查 <code>rolldownVersion</code> export 的存在：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vite.rolldownVersion) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // rolldown-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // rollup-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你将 <code>vite</code> 作为依赖项（dependency），而不是同等依赖（peer dependency），那么 <code>rolldownVersion</code> export 非常有用，因为它可以在你代码的任何地方使用。</p><h3 id="ignoring-option-validation-in-rolldown" tabindex="-1">在 Rolldown 中忽略选项验证 <a class="header-anchor" href="#ignoring-option-validation-in-rolldown" aria-label="Permalink to &quot;在 Rolldown 中忽略选项验证 {#ignoring-option-validation-in-rolldown}&quot;">​</a></h3><p>如 <a href="#option-validation-errors">前文所述</a>，当传入未知或无效选项时，Rolldown 会抛出错误。</p><p>可通过条件式传递选项（通过 <a href="#detecting-rolldown-vite">如上所示</a> 检测是否使用 <code>rolldown-vite</code>）来修复此问题。</p><p>在此场景中，设置环境变量 <code>ROLLDOWN_OPTIONS_VALIDATION=loose</code> 亦可抑制错误。 但需注意，<strong>最终仍需停止传递 Rolldown 不支持的选项</strong>。</p><h3 id="transformwithesbuild-requires-installing-esbuild-separately" tabindex="-1"><code>transformWithEsbuild</code> 需要单独安装 <code>esbuild</code> <a class="header-anchor" href="#transformwithesbuild-requires-installing-esbuild-separately" aria-label="Permalink to &quot;\`transformWithEsbuild\` 需要单独安装 \`esbuild\` {#transformwithesbuild-requires-installing-esbuild-separately}&quot;">​</a></h3><p>一个类似的函数，名为 <code>transformWithOxc</code>，它使用 Oxc 而非 <code>esbuild</code>，从 <code>rolldown-vite</code> 中导出。</p><h3 id="compatibility-layer-for-esbuild-options" tabindex="-1"><code>esbuild</code> 选项的兼容层 <a class="header-anchor" href="#compatibility-layer-for-esbuild-options" aria-label="Permalink to &quot;\`esbuild\` 选项的兼容层 {#compatibility-layer-for-esbuild-options}&quot;">​</a></h3><p>Rolldown-Vite 有一个兼容层，用于将 <code>esbuild</code> 的选项转换为相应的 Oxc 或 <code>rolldown</code> 选项。正如 <a href="https://github.com/vitejs/vite-ecosystem-ci/blob/rolldown-vite/README-temp.md" target="_blank" rel="noreferrer">生态系统 CI</a> 中测试的那样，这在许多情况，包括简单的 <code>esbuild</code> 插件下都有效。 虽说如此，但 <strong>我们将在未来移除对 <code>esbuild</code> 选项的支持</strong>，并鼓励你尝试使用相应的 Oxc 或 <code>rolldown</code> 选项。 你可以从 <code>configResolved</code> 钩子获取由兼容层设置的选项。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;log-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  configResolved</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;options&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, config.optimizeDeps, config.oxc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><h3 id="hook-filter-feature" tabindex="-1">钩子过滤功能 <a class="header-anchor" href="#hook-filter-feature" aria-label="Permalink to &quot;钩子过滤功能 {#hook-filter-feature}&quot;">​</a></h3><p>Rolldown 引入了<a href="https://rolldown.rs/guide/plugin-development#plugin-hook-filters" target="_blank" rel="noreferrer">钩子过滤功能</a>，以减少 Rust 和 JavaScript 运行时之间的通信开销。通过使用此功能，你可以使你的插件性能更高。 这也在 Rollup 4.38.0+ 和 Vite 6.3.0+ 被支持。为了使你的插件向后兼容较旧的版本，请确保也在钩子处理程序内运行过滤器。</p><h3 id="converting-content-to-javascript-in-load-or-transform-hooks" tabindex="-1">在 <code>load</code> 或 <code>transform</code> 钩子中将内容转换为 JavaScript <a class="header-anchor" href="#converting-content-to-javascript-in-load-or-transform-hooks" aria-label="Permalink to &quot;在 \`load\` 或 \`transform\` 钩子中将内容转换为 JavaScript {#converting-content-to-javascript-in-load-or-transform-hooks}&quot;">​</a></h3><p>如果你在 <code>load</code> 或 <code>transform</code> 钩子中将内容转换为 JavaScript，你可能需要添加 <code>moduleType: &#39;js&#39;</code> 到返回值中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;txt-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        code: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`export default \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是因为 <a href="https://rolldown.rs/guide/in-depth/module-types" target="_blank" rel="noreferrer">Rolldown 支持非 JavaScript 模块</a> 并且除非指定，否则从扩展名推断模块类型。注意 <code>rolldown-vite</code> 不支持开发中的 ModuleTypes。</p>`,76))])}const v=e(r,[["render",d]]);export{b as __pageData,v as default};
